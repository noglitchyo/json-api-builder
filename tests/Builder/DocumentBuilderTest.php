<?php declare(strict_types=1);

namespace NoGlitchYo\JsonApiBuilder\Tests\Builder;

use NoGlitchYo\JsonApiBuilder\Builder\DocumentBuilder;
use NoGlitchYo\JsonApiBuilder\Definition\Document;
use NoGlitchYo\JsonApiBuilder\Definition\ResourceObjectInterface;
use NoGlitchYo\JsonApiBuilder\Factory\DocumentFactory;
use NoGlitchYo\JsonApiBuilder\Processor\IncludedResourceProcessor;
use NoGlitchYo\JsonApiBuilder\Processor\ResourceObjectProcessor;
use NoGlitchYo\JsonApiBuilder\Traits\ResourceObjectTrait;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class DocumentBuilderTest extends TestCase
{
    /**
     * @var MockObject|DocumentFactory
     */
    private $documentFactoryMock;

    /**
     * @var MockObject|ResourceObjectProcessor
     */
    private $resourceObjectProcessorMock;

    /**
     * @var MockObject|IncludedResourceProcessor
     */
    private $includedResourceProcessorMock;

    /**
     * @var DocumentBuilder
     */
    private $sut;

    /**
     * @var array
     */
    private $includes;

    protected function setUp(): void
    {
        $this->includedResourceProcessorMock = $this->createMock(IncludedResourceProcessor::class);
        $this->resourceObjectProcessorMock = $this->createMock(ResourceObjectProcessor::class);
        $this->documentFactoryMock = $this->createMock(DocumentFactory::class);

        $this->includes = [
            'resource_type_1',
            'relationship_identifier',
        ];

        $this->sut = new DocumentBuilder(
            $this->includedResourceProcessorMock,
            $this->resourceObjectProcessorMock,
            $this->documentFactoryMock
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider provideResourceObjects
     * @depends      testAddIncludes
     */
    public function testBuildReturnDocument(ResourceObjectInterface $resourceObject, DocumentBuilder $documentBuilder)
    {
        $document = $documentBuilder->build();

        $this->resourceObjectProcessorMock
            ->expects($this->any())
            ->method('process')
            ->willReturn($resourceObject);

        $this->includedResourceProcessorMock
            ->expects($this->any())
            ->method('process')
            ->with()
            ->willReturn(
                [

                ]
            );

        //process($resourceObject, $this->includes)
        $this->assertEquals($document->getIncluded(), $this->includes);

    }



    /**
     * @dataProvider provideResourceObjects
     * @return DocumentBuilder
     */
    public function testAddResourceObjects(ResourceObjectInterface $resourceObject): DocumentBuilder
    {
        $documentBuilder = new DocumentBuilder(
            $this->includedResourceProcessorMock,
            $this->resourceObjectProcessorMock,
            $this->documentFactoryMock
        );

        $documentBuilder = $documentBuilder->addResourceObjects([$resourceObject]);

        $this->assertSame($documentBuilder, $documentBuilder->addResourceObjects([$resourceObject]));

        return $documentBuilder;
    }

    /**
     * @depends testAddResourceObjects

     * @return DocumentBuilder
     */
    public function testAddIncludes(DocumentBuilder $documentBuilder): DocumentBuilder
    {
        $documentBuilder->addIncludes($this->includes);

        return $documentBuilder;
    }

    public function testAddErrors()
    {

    }

    public function provideResourceObjects(): array
    {
        return [
            [
                new class($this->getRelationshipJsonApiClass()) implements ResourceObjectInterface
                {
                    use ResourceObjectTrait;

                    /**
                     * @var ResourceObjectInterface
                     */
                    private $relationshipResourceObject;

                    public function __construct(ResourceObjectInterface $relationship)
                    {
                        $this->relationshipResourceObject = $relationship;
                    }

                    public function getJsonAttributes(): array
                    {
                        return [
                            'attribute_key_name' => $this->relationshipResourceObject,
                        ];
                    }

                    public function getJsonApiRelationShips(): array
                    {
                        return [
                            'relationship_identifier' => 'attribute_key_name',
                        ];
                    }

                    public function getJsonApiType(): string
                    {
                        return 'resource_type_1';
                    }

                    public function getJsonApiId(): string
                    {
                        return 'json_api_id';
                    }
                },
            ],
        ];
    }

    private function getRelationshipJsonApiClass(): ResourceObjectInterface
    {
        return new class implements ResourceObjectInterface
        {
            use ResourceObjectTrait;

            public function getJsonApiType(): string
            {
                return 'relationship_json_api_type';
            }

            public function getJsonApiId(): string
            {
                return 'relationship_json_api_id';
            }
        };
    }
}
