<?php declare(strict_types=1);

namespace NoGlitchYo\JsonApiBuilder\Tests\Builder;

use NoGlitchYo\JsonApiBuilder\Builder\DocumentBuilder;
use NoGlitchYo\JsonApiBuilder\Definition\Document;
use NoGlitchYo\JsonApiBuilder\Definition\DocumentInterface;
use NoGlitchYo\JsonApiBuilder\Definition\ResourceObjectInterface;
use NoGlitchYo\JsonApiBuilder\Factory\DocumentFactory;
use NoGlitchYo\JsonApiBuilder\Processor\IncludedResourceProcessor;
use NoGlitchYo\JsonApiBuilder\Processor\ResourceObjectProcessor;
use NoGlitchYo\JsonApiBuilder\Traits\ResourceObjectTrait;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class DocumentBuilderTest extends TestCase
{
    /**
     * @var ResourceObjectInterface
     */
    private static $resourceObject;
    /**
     * @var ResourceObjectInterface
     */
    private static $relationship;

    /**
     * @var MockObject|DocumentFactory
     */
    private $documentFactoryMock;

    /**
     * @var MockObject|ResourceObjectProcessor
     */
    private $resourceObjectProcessorMock;

    /**
     * @var MockObject|IncludedResourceProcessor
     */
    private $includedResourceProcessorMock;

    /**
     * @var DocumentBuilder
     */
    private $sut;

    /**
     * @var array
     */
    private $includes;


    public static function setUpBeforeClass(): void
    {
        static::$relationship = static::getRelationshipJsonApiClass();
        static::$resourceObject = static::getResourceObject(static::$relationship);
    }

    protected function setUp(): void
    {
        $this->includes = [
            'resource_type_1',
            'relationship_identifier',
        ];

        $this->includedResourceProcessorMock = $this->createMock(IncludedResourceProcessor::class);
        $this->resourceObjectProcessorMock = $this->createMock(ResourceObjectProcessor::class);
        $this->documentFactoryMock = $this->createMock(DocumentFactory::class);

        $this->sut = new DocumentBuilder(
            $this->includedResourceProcessorMock,
            $this->resourceObjectProcessorMock,
            $this->documentFactoryMock
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testAddResourceObjectsReturnDocumentBuilder(): void
    {
        $documentBuilder = $this->sut->addResourceObjects([static::$resourceObject]);

        $this->assertSame($documentBuilder, $this->sut);
    }

    public function testAddIncludesReturnDocumentBuilder(): void
    {
        $documentBuilder = $this->sut->addIncludes($this->includes);

        $this->assertSame($documentBuilder, $this->sut);
    }

    public function testBuildReturnDocumentWithAllBuildParameters()
    {
        $this->sut = $this->sut->addResourceObjects([static::$resourceObject]);

        $this->sut = $this->sut->addIncludes($this->includes);

        $newDocument = new Document();

        $this->documentFactoryMock
            ->expects($this->once())
            ->method('create')
            ->willReturn($newDocument);

        $this->resourceObjectProcessorMock
            ->expects($this->any())
            ->method('process')
            ->willReturn(static::$resourceObject);

        $this->includedResourceProcessorMock
            ->expects($this->any())
            ->method('process')
            ->with()
            ->willReturn(
                [
                    static::$relationship,
                ]
            );

        $document = $this->sut->build();

        $this->assertInstanceOf(DocumentInterface::class, $document);

        $data = [static::$resourceObject];
        $this->assertEquals($data, $document->getData());

        $includedResourceObjects = [static::$relationship];
        $this->assertEquals($document->getIncluded(), $includedResourceObjects);
    }

    public static function getResourceObject(ResourceObjectInterface $relationship): ResourceObjectInterface
    {
        return new class($relationship) implements ResourceObjectInterface
        {
            use ResourceObjectTrait;

            /**
             * @var ResourceObjectInterface
             */
            private $relationshipResourceObject;

            public function __construct(ResourceObjectInterface $relationship)
            {
                $this->relationshipResourceObject = $relationship;
            }

            public function getJsonAttributes(): array
            {
                return [
                    'attribute_key_name' => $this->relationshipResourceObject,
                ];
            }

            public function getJsonApiRelationShips(): array
            {
                return [
                    'relationship_identifier' => 'attribute_key_name',
                ];
            }

            public function getJsonApiType(): string
            {
                return 'resource_type_1';
            }

            public function getJsonApiId(): string
            {
                return 'json_api_id';
            }
        };
    }

    private static function getRelationshipJsonApiClass(): ResourceObjectInterface
    {
        return new class implements ResourceObjectInterface
        {
            use ResourceObjectTrait;

            public function getJsonApiType(): string
            {
                return 'relationship_json_api_type';
            }

            public function getJsonApiId(): string
            {
                return 'relationship_json_api_id';
            }
        };
    }
}
